@page "/"
@page "/{*segments}"

@using Microsoft.FluentUI.AspNetCore.Components
@using System.Web
@inject StreamService StreamService
@inject NavigationManager Navigation
@inject IDialogService DialogService
@inject IToastService ToastService
@inject IJSRuntime JsRuntime

@implements IDisposable

<PageTitle>Multi-Stream Viewer</PageTitle>

<div class="main-layout @GetMainLayoutClass()">
    <!-- Chat Pane - Left -->
    @if (StreamService.ChatMode == ChatDisplayMode.Pane &&
         StreamService.IsChatPaneVisible &&
         StreamService.ChatPosition == ChatPanePosition.Left)
    {
        <ChatPane />
    }

    <!-- Main Content Area -->
    <div class="content-area">          <div class="header-section">
            <!-- App Title -->
            <div class="app-title">
                <FluentIcon Value="@(new Icons.Regular.Size20.VideoClip())" Color="Color.Accent"/>
                <FluentLabel Typo="Typography.Body" Style="font-weight: 600; font-size: 16px;">
                    Multi-Stream Viewer
                </FluentLabel>
            </div>            <!-- Main Toolbar -->
            <FluentToolbar Style="flex: 1; justify-content: flex-end; gap: 8px;">
                <!-- Chat Controls -->
                    <FluentButton IconStart="@(new Icons.Regular.Size16.Chat())"
                                  Appearance="@(StreamService.ChatMode == ChatDisplayMode.Pane ? Appearance.Accent : Appearance.Neutral)"
                                  OnClick="() => SetChatMode(ChatDisplayMode.Pane)"
                                  Title="Chat Pane" />
                    <FluentButton IconStart="@(new Icons.Regular.Size16.ChatBubblesQuestion())"
                                  Appearance="@(StreamService.ChatMode == ChatDisplayMode.Attached ? Appearance.Accent : Appearance.Neutral)"
                                  OnClick="() => SetChatMode(ChatDisplayMode.Attached)"
                                  Title="Chat Attached" />
                    
                    @if (StreamService.ChatMode == ChatDisplayMode.Pane)
                    {
                        <FluentButton
                            IconStart="@(StreamService.IsChatPaneVisible ? new Icons.Regular.Size16.PanelRight() : new Icons.Regular.Size16.PanelLeft())"
                            Appearance="Appearance.Stealth"
                            OnClick="() => StreamService.ToggleChatPane()"
                            Title="@(StreamService.IsChatPaneVisible ? "Hide Chat" : "Show Chat")" />
                    }                    <FluentDivider Role="DividerRole.Separator" Orientation="Orientation.Vertical" />

                    <!-- Universal Input -->
                    <FluentTextField @bind-Value="_universalInput" 
                                     Id="universal-input"
                                     Placeholder="Add streams: URL or t/username, y/videoid, k/username"
                                     @onkeyup="HandleUniversalKeyUp"
                                     Style="width: 280px;" />
                    
                    <FluentPopover @bind-Open="_showInputHelp" 
                                   AnchorId="input-help-anchor"
                                   VerticalPosition="@VerticalPosition.Bottom"
                                   HorizontalPosition="@HorizontalPosition.Left"
                                   Style="max-width: 380px;">
                        <Body>
                            <FluentStack Orientation="Orientation.Vertical" VerticalGap="12">
                                <FluentLabel Typo="Typography.Body" Style="font-weight: 600;">
                                    Add Streams - Multiple Ways
                                </FluentLabel>                                
                                <FluentStack Orientation="Orientation.Vertical" VerticalGap="8">
                                    <FluentLabel Typo="Typography.Body">
                                        <strong>Full URLs:</strong>
                                    </FluentLabel>
                                    <FluentLabel Typo="Typography.Body" Style="margin-left: 8px;">
                                        • <code>https://twitch.tv/username</code><br/>
                                        • <code>https://youtube.com/watch?v=videoid</code><br/>
                                        • <code>https://kick.com/username</code>
                                    </FluentLabel>                                        
                                    <FluentLabel Typo="Typography.Body">
                                        <strong>Shorthand patterns:</strong>
                                    </FluentLabel>
                                    <FluentLabel Typo="Typography.Body" Style="margin-left: 8px;">
                                        • <code>t/username</code> (Twitch)<br/>
                                        • <code>y/videoid</code> (YouTube)<br/>
                                        • <code>k/username</code> (Kick)
                                    </FluentLabel>
                                    <FluentLabel Typo="Typography.Body">
                                        <strong>Multiple streams:</strong>
                                    </FluentLabel>
                                    <FluentLabel Typo="Typography.Body" Style="margin-left: 8px;">
                                        <code>t/shroud/k/xqc/y/dQw4w9WgXcQ</code>
                                    </FluentLabel>
                                </FluentStack>
                            </FluentStack>
                        </Body>
                    </FluentPopover>
                    
                    <FluentButton id="input-help-anchor"
                                  @onclick="ToggleInputHelp"
                                  IconStart="@(new Icons.Regular.Size16.Info())"
                                  Appearance="Appearance.Stealth"
                                  Title="Input Help" />

                    @if (StreamService.Streams.Any())
                    {
                        <FluentDivider Role="DividerRole.Separator" Orientation="Orientation.Vertical" />
                        
                        <FluentButton IconStart="@(new Icons.Regular.Size16.Share())"
                                      Appearance="Appearance.Stealth"
                                      OnClick="ShareUrlToClipboard"
                                      Title="Share URL" />
                        <FluentButton IconStart="@(new Icons.Regular.Size16.Settings())"
                                      Appearance="Appearance.Stealth"
                                      OnClick="OpenManageStreamsDialog"
                                      Title="Manage Streams" />                    }
                </FluentToolbar>
        </div>

        <div class="streams-section">
            <StreamsContainer />
        </div>
    </div>

    <!-- Chat Pane - Right -->
    @if (StreamService.ChatMode == ChatDisplayMode.Pane &&
         StreamService.IsChatPaneVisible &&
         StreamService.ChatPosition == ChatPanePosition.Right)
    {
        <ChatPane/>
    }
</div>

<!-- Manage Streams Dialog -->
<FluentDialog @bind-Hidden="@_isManageDialogHidden"
              Modal="true"
              TrapFocus="true"
              PreventScroll="true"
              AriaLabel="Manage Streams">
    <FluentDialogHeader ShowDismiss="true">
        <FluentStack VerticalAlignment="VerticalAlignment.Center">
            <FluentIcon Value="@(new Icons.Regular.Size24.Settings())"/>
            <FluentLabel Typo="Typography.PaneHeader">
                Manage Streams
            </FluentLabel>
        </FluentStack>
    </FluentDialogHeader>

    <FluentDialogBody>
        @if (StreamService.Streams.Any())
        {
            <FluentStack Orientation="Orientation.Vertical" VerticalGap="8">
                @foreach (var stream in StreamService.Streams)
                {
                    <FluentCard class="stream-item">
                        <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="12">
                            <FluentIcon Value="@GetPlatformIcon(stream.Platform)" Color="Color.Accent"/>
                            <FluentStack Orientation="Orientation.Vertical" VerticalGap="2" Style="flex: 1;">
                                <FluentLabel Typo="Typography.Body" Style="font-weight: 600;">
                                    @stream.StreamerName
                                </FluentLabel>
                                <FluentLabel Typo="Typography.Body" Color="Color.Disabled" Style="font-size: 0.85em;">
                                    @stream.Platform
                                </FluentLabel>
                            </FluentStack>
                            <FluentButton IconEnd="@(new Icons.Regular.Size16.Delete())"
                                          Appearance="Appearance.Stealth"
                                          OnClick="() => RemoveStream(stream)"
                                          Title="Remove Stream" />
                        </FluentStack>
                    </FluentCard>
                }
            </FluentStack>
        }
        else
        {
            <FluentLabel Typo="Typography.Body" Color="Color.Disabled">
                No streams added yet.
            </FluentLabel>
        }
    </FluentDialogBody>

    <FluentDialogFooter>
        <FluentButton Appearance="Appearance.Neutral" OnClick="CloseManageDialog">
            Close
        </FluentButton>
        @if (StreamService.Streams.Any())
        {
            <FluentButton Appearance="Appearance.Accent"
                          IconStart="@(new Icons.Regular.Size16.Delete())"
                          OnClick="ClearAllStreamsFromDialog">
                Clear All
            </FluentButton>
        }
    </FluentDialogFooter>
</FluentDialog>

@code {
      [Parameter] public string? Segments { get; set; }
    
    private string _universalInput = string.Empty;
    private bool _isManageDialogHidden = true;
    private bool _showInputHelp = false;    protected override void OnInitialized()
    {
        StreamService.StreamsChanged += StateHasChanged;
        StreamService.ChatSettingsChanged += StateHasChanged;

        // Load streams from URL if segments are provided
        if (!string.IsNullOrEmpty(Segments))
        {
            try
            {
                LoadStreamsFromUrl();
            }
            catch (Exception ex)
            {
                // Handle URL parsing errors
                Console.WriteLine($"Error parsing URL segments: {ex.Message}");
            }        }
    }

    private void SetChatMode(ChatDisplayMode mode)
    {
        StreamService.SetChatMode(mode);
    }    private void ToggleInputHelp()
    {
        _showInputHelp = !_showInputHelp;
    }

    private async Task ShareUrlToClipboard()
    {
        try
        {
            var shareableUrl = GetShareableUrl();
            await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", shareableUrl);
            ToastService.ShowSuccess("URL copied to clipboard!");
        }
        catch (Exception)
        {
            ToastService.ShowError("Failed to copy URL to clipboard");
        }
    }    
    
    private string GetShareableUrl()
    {
        var baseUri = Navigation.BaseUri.TrimEnd('/'); // This will be https://pjmagee.github.io/multi-stream-viewer/
        var currentUri = Navigation.Uri;
        
        // If current URI equals base URI, return base URI
        if (currentUri.Equals(baseUri, StringComparison.OrdinalIgnoreCase) || 
            currentUri.Equals(baseUri + "/", StringComparison.OrdinalIgnoreCase))
        {
            return baseUri;
        }
        
        // Otherwise return the full current URI which should already be correct
        return currentUri;
    }

    private void ClearAllStreams()
    {
        StreamService.ClearAllStreams();
        UpdateUrl();
    }

    private void OpenManageStreamsDialog()
    {
        _isManageDialogHidden = false;
    }

    private void CloseManageDialog()
    {
        _isManageDialogHidden = true;
    }

    private void RemoveStream(StreamInfo stream)
    {
        StreamService.RemoveStream(stream.Id);
        UpdateUrl();
    }

    private void ClearAllStreamsFromDialog()
    {
        StreamService.ClearAllStreams();
        UpdateUrl();
        _isManageDialogHidden = true;
    }

    private Icon GetPlatformIcon(StreamPlatform platform)
    {        return platform switch
        {
            StreamPlatform.Twitch => PlatformIcons.Twitch,
            StreamPlatform.YouTube => PlatformIcons.YouTube,
            StreamPlatform.Kick => PlatformIcons.Kick,
            _ => PlatformIcons.YouTube
        };
    }

    private async Task AddFromUniversalInput()
    {
        if (string.IsNullOrWhiteSpace(_universalInput))
        {
            await DialogService.ShowErrorAsync("Please enter a URL or pattern.", "Invalid Input");
            return;
        }

        try
        {
            var input = _universalInput.Trim();
            var addedCount = 0;

            // Check if it's a URL
            if (input.StartsWith("http://") || input.StartsWith("https://"))
            {
                var parsedStream = ParseUrl(input);
                if (parsedStream != null)
                {
                    StreamService.AddStream(parsedStream.Value.platform, parsedStream.Value.identifier);
                    addedCount = 1;
                }
            }
            else
            {
                // Handle shorthand patterns (t/user, y/videoid, k/user, or multiple)
                var parts = input.Split('/', StringSplitOptions.RemoveEmptyEntries);
                
                for (int i = 0; i < parts.Length - 1; i += 2)
                {
                    var platformShort = parts[i].Trim().ToLower();
                    var identifier = parts[i + 1].Trim();

                    var platform = platformShort switch
                    {
                        "t" => StreamPlatform.Twitch,
                        "y" => StreamPlatform.YouTube,
                        "k" => StreamPlatform.Kick,
                        _ => (StreamPlatform?)null
                    };

                    if (platform.HasValue)
                    {
                        StreamService.AddStream(platform.Value, identifier);
                        addedCount++;
                    }
                }
            }

            _universalInput = string.Empty;

            if (addedCount == 0)
            {
                await DialogService.ShowWarningAsync("No valid streams found. Use full URLs or shorthand: t/user, y/videoid, k/user", "No Streams Added");
            }
            else
            {
                UpdateUrl();
            }
        }
        catch (Exception ex)
        {
            await DialogService.ShowErrorAsync($"Failed to parse input: {ex.Message}", "Error");
        }
    }

    private (StreamPlatform platform, string identifier)? ParseUrl(string url)
    {
        try
        {
            var uri = new Uri(url);
            var host = uri.Host.ToLower();

            if (host.Contains("twitch.tv"))
            {
                var username = uri.AbsolutePath.TrimStart('/');
                if (!string.IsNullOrEmpty(username))
                {
                    return (StreamPlatform.Twitch, username);
                }
            }
            else if (host.Contains("youtube.com") || host.Contains("youtu.be"))
            {
                string? videoId = null;
                
                if (host.Contains("youtu.be"))
                {
                    videoId = uri.AbsolutePath.TrimStart('/');
                }
                else if (uri.Query.Contains("v="))
                {
                    var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
                    videoId = query["v"];
                }
                
                if (!string.IsNullOrEmpty(videoId))
                {
                    return (StreamPlatform.YouTube, videoId);
                }
            }
            else if (host.Contains("kick.com"))
            {
                var username = uri.AbsolutePath.TrimStart('/');
                if (!string.IsNullOrEmpty(username))
                {
                    return (StreamPlatform.Kick, username);
                }
            }
        }
        catch
        {
            // Invalid URL format
        }

        return null;
    }    private async Task HandleUniversalKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await AddFromUniversalInput();
        }
    }private void UpdateUrl()
    {
        var segments = new List<string>();

        foreach (var stream in StreamService.Streams)
        {
            segments.Add(stream.Platform.ToString().ToLower());
            segments.Add(stream.StreamerName);
        }

        // Use relative path that respects the base href
        var relativePath = segments.Any() ? string.Join("/", segments) : "";
        var url = string.IsNullOrEmpty(relativePath) ? "" : relativePath;
        Navigation.NavigateTo(url, false);
    }

    private void LoadStreamsFromUrl()
    {
        if (string.IsNullOrEmpty(Segments))
            return;

        var parts = Segments.Split('/', StringSplitOptions.RemoveEmptyEntries);

        for (int i = 0; i < parts.Length - 1; i += 2)
        {
            var platformName = parts[i];
            var streamerName = parts[i + 1];

            if (Enum.TryParse<StreamPlatform>(platformName, true, out var platform))
            {
                StreamService.AddStream(platform, streamerName);
            }
        }
    }

    private string GetMainLayoutClass()
    {
        var classes = new List<string>
        {
            "main-layout"
        };

        if (StreamService.ChatMode == ChatDisplayMode.Pane && StreamService.IsChatPaneVisible)
        {
            classes.Add("with-chat-pane");
            classes.Add($"chat-{StreamService.ChatPosition.ToString().ToLower()}");
        }

        return string.Join(" ", classes);
    }    public void Dispose()
    {
        StreamService.StreamsChanged -= StateHasChanged;
        StreamService.ChatSettingsChanged -= StateHasChanged;
    }

}
