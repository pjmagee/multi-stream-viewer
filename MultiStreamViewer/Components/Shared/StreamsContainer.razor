@inject StreamService StreamService
@inject IJSRuntime JSRuntime
@implements IDisposable

<div id="streams-container" class="streams-container grid-container">
    @if (StreamService.Streams.Any())
    {
        @foreach (var stream in StreamService.Streams)
        {
            <div class="stack-item">
                <StreamCard Stream="stream" />
            </div>
        }
    }
    else
    {
        <div class="no-streams-message">
            <div class="empty-content">
                <FluentIcon Value="@(new Icons.Regular.Size48.VideoClip())" Color="Color.Disabled" />
                <FluentLabel Typo="Typography.H5">No streams added yet</FluentLabel>
                <FluentLabel>Add your first stream using the form above to get started!</FluentLabel>
            </div>
        </div>
    }
</div>

@code {    protected override void OnInitialized()
    {
        StreamService.StreamsChanged += OnStreamsChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender || StreamService.Streams.Any())
        {
            await OptimizeLayout();
        }
    }    private async void OnStreamsChanged()
    {
        StateHasChanged();
        await OptimizeLayout();
    }    private async Task OptimizeLayout()
    {
        try
        {
            if (StreamService.Streams.Any())
            {
                await JSRuntime.InvokeVoidAsync("streamOptimizer.optimizeStreamLayout", StreamService.Streams.Count);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Layout optimization error: {ex.Message}");
        }
    }    public void Dispose()
    {
        StreamService.StreamsChanged -= OnStreamsChanged;
    }
}
